// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

float3      _CameraPosition;
float4x4    _CameraToWorld;
float4x4    _CameraInverseProjection;
uint        _NumRaysPerPixel;
uint        _IterationCount;
uint        _MaxBounces;
float3      _HorizonColor;
float3      _SkyColor;
float       _SkyEmission;
float3      _SunDirection;
float       _SunEye;
float       _SunColor;

struct Material             //48 byte
{
    float4 color;           //16 byte
    float smoothness;       //4  byte
    float emission;         //4  byte
    float3 emissionColor;   //12 byte
    float3 padding;         //12 byte
};

struct Sphere           //64 byte
{
    float3 position;    //12 byte
    float radius;       //4  byte
    
    Material material;  //48 byte
};

struct Triangle                       //96 byte
{
    float3 a, b, c;                   //48 byte
    float3 Anormal, Bnormal, Cnormal; //48 byte
};

struct MeshInfo                     //96 byte
{
    uint firstTriangleIndex;        //4  byte
    uint numTriangles;              //4  byte
    uint matrixIndex;               //4  byte
    Material material;              //48 byte
    float3 boundsMin;               //12 byte
    float3 boundsMax;               //12 byte
    float3 padding;                 //12 byte
};

struct Ray
{
    float3 origin;
    float3 direction;
};

struct HitInfo
{
    bool isHit;
    float distance;
    float3 position;
    float3 normal;
    Material material;
};

StructuredBuffer<Sphere> _Spheres;

StructuredBuffer<Triangle> _Tris;
StructuredBuffer<MeshInfo> _MeshInfo;

StructuredBuffer<float4x4> _LocalToWorldMatrices;
StructuredBuffer<float4x4> _WorldToLocalMatrices;

uint numSpheres;
uint numMeshes;
uint sphereStride = 48;
uint meshStride = 144;
float width, height;

uint state = 1;

static float PI = 3.14159265358979;

uint RandomUInt()
{
    state = state * 747796405u + 2891336453u;
    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
    return ((word >> 22u) ^ word);
}

float RandomFloat01()
{
    return RandomUInt() / 4294967295.0;
}

HitInfo SphereRayIntersect(Ray ray, Sphere sphere)
{   
    HitInfo hitInfo = (HitInfo)0;
    float3 offsetRayOrigin = ray.origin - sphere.position;
    
    float a = dot(ray.direction, ray.direction);
    float b = 2 * dot(offsetRayOrigin, ray.direction);
    float c = dot(offsetRayOrigin, offsetRayOrigin) - sphere.radius * sphere.radius;
    
    float d = b * b - 4 * a * c;
    
    if (d >= 0)
    {
        float distance = (-b - sqrt(d)) / (2 * a);
        
        if (distance >= 0)
        {
            hitInfo.isHit = true;
            hitInfo.distance = distance;
            hitInfo.position = ray.origin + ray.direction * distance;
            hitInfo.normal = normalize(hitInfo.position - sphere.position);
            hitInfo.material = sphere.material;
        }
    }
    
    return hitInfo;
}

HitInfo TriangleRayIntersect(Ray ray, Triangle tri, float4x4 normalMatrix)
{
    //tri.a = mul(localToWorld, float4(tri.a.xyz, 1)).xyz;
    //tri.b = mul(localToWorld, float4(tri.b.xyz, 1)).xyz;
    //tri.c = mul(localToWorld, float4(tri.c.xyz, 1)).xyz;
    
    ////float3x3 normalMatrix = transpose(inverse((float3x3) localToWorld));
    //tri.Anormal = normalize(mul((float3x3) localToWorld, tri.Anormal));
    //tri.Bnormal = normalize(mul((float3x3) localToWorld, tri.Bnormal));
    //tri.Cnormal = normalize(mul((float3x3) localToWorld, tri.Cnormal));
    
    //tri.Anormal = normalize(mul(normalMatrix, float4(tri.Anormal, 0)));
    //tri.Bnormal = normalize(mul(normalMatrix, float4(tri.Bnormal, 0)));
    //tri.Cnormal = normalize(mul(normalMatrix, float4(tri.Cnormal, 0)));
    
    float3 edgeAB = tri.b - tri.a;
    float3 edgeAC = tri.c - tri.a;
    float3 normalVector = cross(edgeAB, edgeAC);
    float3 ao = ray.origin - tri.a;
    float3 dao = cross(ao, ray.direction);

    float determinant = -dot(ray.direction, normalVector);
    float invDet = 1 / determinant;
				
	//Calculate dst to triangle & barycentric coordinates of intersection point
    float dst = dot(ao, normalVector) * invDet;
    float u = dot(edgeAC, dao) * invDet;
    float v = -dot(edgeAB, dao) * invDet;
    float w = 1 - u - v;
				
    HitInfo hitInfo;
    hitInfo.isHit = determinant >= 1E-6 && dst >= 0 && u >= 0 && v >= 0 && w >= 0;
    hitInfo.position = ray.origin + ray.direction * dst;
    hitInfo.normal = normalize(tri.Anormal * w + tri.Bnormal * u + tri.Cnormal * v);
    hitInfo.distance = dst;
    return hitInfo;
    
    //HitInfo hitinfo = (HitInfo) 0;
    //hitinfo.isHit = false;
    
    //// Compute the plane's normal
    //float3 v0v1 = tri.b - tri.a;
    //float3 v0v2 = tri.c - tri.a;
    //// No need to normalize
    //float3 N = cross(v0v1, v0v2); // N
 
    //// Step 1: Finding P
    
    //// Check if the ray and plane are parallel
    //float NdotRayDirection = dot(N, ray.direction);
    //if (abs(NdotRayDirection) < 1e-6) // Almost 0
    //    return hitinfo; // They are parallel, so they don't intersect!

    //// Compute d parameter using equation 2
    //float d = dot(-N, tri.a);
    
    //// Compute t (equation 3)
    //float t = -(dot(N, ray.origin) + d) / NdotRayDirection;
    
    //// Check if the triangle is behind the ray
    //if (t < 0)
    //    return hitinfo; // The triangle is behind
 
    //// Compute the intersection point using equation 1
    //float3 P = ray.origin + t * ray.direction;
 
    //// Step 2: Inside-Outside Test
    //float3 Ne; // Vector perpendicular to triangle's plane
 
    //// Test sidedness of P w.r.t. edge v0v1
    //float3 v0p = P - tri.a;
    //Ne = cross(v0v1, v0p);
    //if (dot(N, Ne) < 0)
    //    return hitinfo; // P is on the right side
 
    //// Test sidedness of P w.r.t. edge v2v1
    //float3 v2v1 = tri.c - tri.b;
    //float3 v1p = P - tri.b;
    //Ne = cross(v2v1, v1p);
    //if (dot(N, Ne) < 0)
    //    return hitinfo; // P is on the right side
 
    //// Test sidedness of P w.r.t. edge v2v0
    //float3 v2v0 = tri.a - tri.c;
    //float3 v2p = P - tri.c;
    //Ne = cross(v2v0, v2p);
    //if (dot(N, Ne) < 0)
    //    return hitinfo; // P is on the right side
    
    //hitinfo.isHit = true;
    //hitinfo.position = P;
    //hitinfo.distance = t;
    //hitinfo.normal = tri.Anormal;

    //return hitinfo; // The ray hits the triangle
}

bool RayBoundingBox(Ray ray, float3 boundsMin, float3 boundsMax/*, float4x4 localToWorldMatrix*/)
{
    //boundsMin = mul(localToWorldMatrix, float4(boundsMin.xyz, 1)).xyz;
    //boundsMax = mul(localToWorldMatrix, float4(boundsMax.xyz, 1)).xyz;
    
    float3 invDir = 1 / ray.direction;
    float3 tMin = (boundsMin - ray.origin) * invDir;
    float3 tMax = (boundsMax - ray.origin) * invDir;
    float3 t1 = min(tMin, tMax);
    float3 t2 = max(tMin, tMax);
    float tNear = max(max(t1.x, t1.y), t1.z);
    float tFar = min(min(t2.x, t2.y), t2.z);
    return tNear <= tFar;
};

HitInfo FindClosestSphereIntersection(Ray ray)
{
    HitInfo closestHit = (HitInfo) 0;
    
    closestHit.distance = 1.#INF;
    
    for (uint i = 0; i < numSpheres; i++)
    {
        Sphere sphere = _Spheres[i];
        
        HitInfo hitInfo = SphereRayIntersect(ray, sphere);

        if (hitInfo.isHit && hitInfo.distance < closestHit.distance)
        {
            closestHit = hitInfo;
            closestHit.material = hitInfo.material;
        }
    }

    return closestHit;
}

HitInfo FindClosestRayIntersection(Ray ray)
{
    HitInfo closestHit = (HitInfo) 0;
    
    closestHit.distance = 1.#INF;
    
    for (uint i = 0; i < numSpheres; i++)
    {
        Sphere sphere = _Spheres[i];
        
        HitInfo hitInfo = SphereRayIntersect(ray, sphere);

        if (hitInfo.isHit && hitInfo.distance < closestHit.distance)
        {
            closestHit = hitInfo;
            closestHit.material = hitInfo.material;
        }
    }
    
    Ray meshRay;
    
    for (uint j = 0; j < numMeshes; j++)
    {
        MeshInfo mesh = _MeshInfo[j];
        
        meshRay.direction = mul(_WorldToLocalMatrices[mesh.matrixIndex], float4(ray.direction.xyz, 0));
        meshRay.origin =    mul(_WorldToLocalMatrices[mesh.matrixIndex], float4(ray.origin.xyz, 1));
        
        if (!RayBoundingBox(meshRay, mesh.boundsMin, mesh.boundsMax))
            continue;
        
        for (uint tri = 0; tri < mesh.numTriangles; tri++)
        {
            HitInfo hitInfo = TriangleRayIntersect(meshRay, _Tris[mesh.firstTriangleIndex + tri], _LocalToWorldMatrices[mesh.matrixIndex]);
            
            if (hitInfo.isHit && hitInfo.distance < closestHit.distance)
            {
                closestHit = hitInfo;
                closestHit.position = mul(_LocalToWorldMatrices[mesh.matrixIndex], float4(closestHit.position.xyz, 0));
                //closestHit.normal = normalize(mul(_LocalToWorldMatrices[mesh.matrixIndex], float4(closestHit.normal, 0)));
                closestHit.material = mesh.material;
            }
        }
        
        closestHit.material.color = float4(closestHit.normal.xyz, 1);
        
        //closestHit.position = ray.origin + 2 * ray.direction;
        //closestHit.material.color = float4(1, 1, 1, 1);
        //closestHit.normal = float3(0, 0, -1);
        //closestHit.isHit = true;
        
        //Material mat;
        //mat.color = float4(_Tris[mesh.firstTriangleIndex + 0].c, 1);
        //mat.smoothness = 0;
        //mat.emission = 0;
        //mat.emissionColor = float3(0, 0, 0);
        
        //closestHit.position = ray.origin + 2 * ray.direction;
        //closestHit.material = mat;
        //closestHit.normal = float3(0, 0, -1);
        //closestHit.isHit = true;
    }
    
    return closestHit;
}

Ray ConstructPixelRay(uint3 id, uint index)
{
    uint pixelID = id.x * width + id.y;
    float random = RandomFloat01();
    
    Ray ray;
    ray.origin = _CameraPosition;
    
    float2 uv = (id.xy + float2(random.xx)) / float2(width, height) * 2.0 - 1.0;
    
    float4 clipUV = float4(uv, 0, 1);
    float4 rayView = mul(_CameraInverseProjection, clipUV);
    rayView /= rayView.w;
    
    float3 rayDirection = normalize(mul(_CameraToWorld, float4(rayView.xyz, 0)).xyz);
    
    ray.direction = rayDirection;
    
    return ray;
}

float RandomNormallyDistributed()
{
    float theta = 2 * PI * RandomFloat01();
    float rho = sqrt(-2 * log(RandomFloat01()));
    return rho * cos(theta);
}

float3 RandomRay(float3 normal)
{
    float x = RandomNormallyDistributed();
    float y = RandomNormallyDistributed();
    float z = RandomNormallyDistributed();
    

    return normalize(float3(x, y, z));
}

float3 SkyColor(Ray ray)
{
    //return smoothstep(float3(0.2, 0.2, 0.2), _SkyColor, (ray.direction.y + 1) / 2);
    float skyT = pow(smoothstep(0, 0.4, ray.direction.y), 0.35);
    float3 skyColor = lerp(_HorizonColor, _SkyColor, skyT);
    float mult = pow(max(0, dot(ray.direction, -_SunDirection)), _SunEye);
    
    return lerp(float3(0.1, 0.1, 0.1), skyColor, smoothstep(-0.01, 0, ray.direction.y)) + (_SunColor * mult);
}

float3 Trace(Ray ray)
{   
    float3 incomingLight = 0;
    float3 finalColor = 1;
    
    for (uint i = 0; i <= _MaxBounces; i++)
    {
        HitInfo hitInfo = FindClosestRayIntersection(ray);
        
        if (hitInfo.isHit)
        {
            ray.origin = hitInfo.position + hitInfo.normal * 0.001;
            float3 diffuseDirection = normalize(hitInfo.normal + RandomRay(hitInfo.normal));
            float3 specularDirection = reflect(ray.direction, hitInfo.normal);
            ray.direction = lerp(diffuseDirection, specularDirection, hitInfo.material.smoothness);
            
            incomingLight += (hitInfo.material.emission * hitInfo.material.emissionColor) * finalColor;
            finalColor *= hitInfo.material.color.xyz;
        }
        else
        {
            incomingLight += (SkyColor(ray) * _SkyEmission) * finalColor;
            break;
        }
    }
    
    return incomingLight;
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    //Cache some useful values for later use
    Result.GetDimensions(width, height);
    _Spheres.GetDimensions(numSpheres, sphereStride);
    _MeshInfo.GetDimensions(numMeshes, meshStride);
    
    //Seed the random generation with the absolute index of the pixel
    state += (uint)(id.y * width + id.x) * _IterationCount;

    float3 finalColor;
    
    //Create multiple rays per pixel with slight variations
    for (uint i = 0; i < _NumRaysPerPixel; i++)
    {
        Ray ray = ConstructPixelRay(id, i);
        finalColor += Trace(ray);
    }
    
    //Output the color to the pixel
    Result[id.xy] = float4(finalColor / _NumRaysPerPixel, 1);
}
